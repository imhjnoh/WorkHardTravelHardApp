{"version":3,"sources":["color.js","App.js"],"names":["theme","clearAllData","AsyncStorage","getAllKeys","then","keys","multiRemove","alert","App","useState","working","setWorking","text","setText","toDos","setToDos","editing","setEditing","useEffect","console","log","loadToDos","loadStatus","onChangeText","payload","saveToDos","toSave","a","async","setItem","JSON","stringify","saveStatus","work","getItem","s","parse","ss","changeToDo","key","type","value","newToDos","exitEdit","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","input","onSubmitEditing","Date","now","done","returnKeyType","ScrollView","Object","map","toDo","toDoLeft","Feather","name","size","toDoText","textDecorationLine","editInput","placeholderTextColor","toDoRight","MaterialCommunityIcons","iconFont","Platform","OS","confirm","Alert","deleteToDo","Fontisto","Array","prototype","sample","this","Math","floor","random","length","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","btnText","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","marginHorizontal","padding"],"mappings":"6RAAaA,EACL,QADKA,EAEH,UAFGA,EAGD,UAHCA,EAIC,U,wkBCoBd,SAASC,IACPC,IAAaC,aACVC,MAAK,SAACC,GAAD,OAAUH,IAAaI,YAAYD,MACxCD,MAAK,kBAAMG,MAAM,cAGP,SAASC,IACtB,MAA8BC,oBAAS,GAAvC,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,WAAOK,EAAP,KAAcC,EAAd,KACA,EAA8BN,oBAAU,GAAxC,WAAOO,EAAP,KAAgBC,EAAhB,KACAC,qBAAU,WACRC,QAAQC,IAAI,WAAYV,KACvB,CAACA,IACJQ,qBAAU,WACRG,IACAC,MACC,IAEH,IAUMC,EAAe,SAACC,GAAD,OAAaX,EAAQW,IACpCC,EAAY,SAAOC,GAAP,SAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACVzB,IAAa2B,QAtCH,SAsCwBC,KAAKC,UAAUL,KADvC,6DAGZM,EAAa,SAAOC,GAAP,SAAAN,EAAAC,OAAA,kEAAAD,EAAA,MACXzB,IAAa2B,QAxCF,WAwCwBI,IADxB,6DAGbZ,EAAY,0BAAAM,EAAAC,OAAA,2EAAAD,EAAA,MAEEzB,IAAagC,QA7Cf,WA2CA,OAERC,EAFQ,OAGdpB,EAASe,KAAKM,MAAMD,IACpBhB,QAAQC,IAAIe,GAJE,gDAMdpB,EAAS,IANK,iEASZO,EAAa,4BAAAK,EAAAC,OAAA,2EAAAD,EAAA,MAECzB,IAAagC,QArDd,aAmDA,OAETC,EAFS,OAGTE,EAAKP,KAAKM,MAAMD,GACtBxB,EAAW0B,EAAE,SACblB,QAAQC,IAAI,wBAAee,EAAGE,EAAE,SALjB,gDAOf1B,GAAW,GAPI,iEAqDb2B,EAAa,SAAOC,EAAKC,EAAMC,GAAlB,eAAAd,EAAAC,OAAA,uDACbc,EADa,KACG5B,IACXyB,GAAKC,GAAQC,EACtBtB,QAAQC,IAAIsB,GACZ3B,EAAS2B,GAJQ,WAAAf,EAAA,MAKXF,EAAUiB,IALC,6DAQbC,EAAW,SAAOJ,GAAP,SAAAZ,EAAAC,OAAA,kEAAAD,EAAA,MACTW,EAAWC,EAAK,OAAQ3B,IADf,OAEfC,EAAQ,IACRI,GAAY,GAHG,6DAMjB,OACE,eAAC2B,EAAA,EAAD,CAAMC,MAAOC,EAAOC,UAApB,UACE,cAACC,EAAA,EAAD,CAAWH,MAAM,SACjB,eAACD,EAAA,EAAD,CAAMC,MAAOC,EAAOG,OAApB,UACE,eAACC,EAAA,EAAD,CAAkBC,QA3FX,WACXxC,GAAW,GACXqB,EAAWF,KAAKC,UAAU,CAAErB,SAAS,MAyFjC,UACGS,QAAQC,IAAI,mBAAoBV,GACjC,cAAC0C,EAAA,EAAD,CACEP,MAAO,CACLQ,SAAU,GACVC,WAAY,MACZC,MAAO7C,EAAU,QAAUV,GAJ/B,qBAUF,cAACkD,EAAA,EAAD,CAAkBC,QAASlD,EAA3B,SACE,cAACmD,EAAA,EAAD,CAAMP,MAAO,CAAEU,MAAO,OAAtB,qBAEF,cAACL,EAAA,EAAD,CAAkBC,QA9GT,WACbxC,GAAW,GACXqB,EAAWF,KAAKC,UAAU,CAAErB,SAAS,MA4GjC,SACE,cAAC0C,EAAA,EAAD,CACEP,MAAO,CACLQ,SAAU,GACVC,WAAY,MACZC,MAAQ7C,EAAoBV,EAAV,SAJtB,yBAWJ,cAACwD,EAAA,EAAD,CACEX,MAAOC,EAAOW,MACdlC,aAAcA,EACdmC,gBA1FU,0BAAA/B,EAAAC,OAAA,mDACD,KAAThB,EADU,wDAKR8B,EALQ,OAMT5B,GANS,UAOX6C,KAAKC,MAAQ,CAAEhD,OAAMqB,KAAMvB,EAASmD,MAAM,KAE7C9C,EAAS2B,GATK,WAAAf,EAAA,MAURF,EAAUiB,IAVF,OAWd7B,EAAQ,IAXM,6DA2FViD,cAAc,SAEhB,cAACC,EAAA,EAAD,UACGjD,GACCkD,OAAO3D,KAAKS,GAAOmD,KAAI,SAAC1B,GAAD,OACrBzB,EAAMyB,GAAKN,OAASvB,EAClB,eAACkC,EAAA,EAAD,CAAgBC,MAAOC,EAAOoB,KAA9B,UACE,eAACtB,EAAA,EAAD,CAAMC,MAAOC,EAAOqB,SAApB,UACE,cAACjB,EAAA,EAAD,CACEC,QAAS,kBAAMb,EAAWC,EAAK,QAASzB,EAAMyB,GAAKsB,OADrD,UAGoC,GAAjC/C,EAAMyB,GAAKsB,KACV,cAACO,EAAA,EAAD,CAASC,KAAK,SAASC,KAAM,GAAIf,MAAM,UAEvC,cAACa,EAAA,EAAD,CACEC,KAAK,eACLC,KAAM,GACNf,MAAOvD,MAKZgB,GAAWuB,GACV,cAACa,EAAA,EAAD,CACEP,MAAK,OACAC,EAAOyB,UADP,IAEHhB,OACmC,GAAjCzC,EAAMyB,GAAKsB,KACP,QACA7D,EACNwE,oBACmC,GAAjC1D,EAAMyB,GAAKsB,KACP,OACA,iBAVV,SAaG/C,EAAMyB,GAAK3B,OAGfI,GAAWuB,GACV,cAACiB,EAAA,EAAD,CACEX,MAAOC,EAAO2B,UACdlD,aAAcA,EACdmC,gBAAiB,WACff,EAASJ,IAEXuB,cAAc,OACdY,qBAAsB1E,EAPxB,SASGc,EAAMyB,GAAK3B,UAKjBI,GAAWuB,GACV,eAACK,EAAA,EAAD,CAAMC,MAAOC,EAAO6B,UAApB,UACE,cAACzB,EAAA,EAAD,CACEC,QAAS,WACPlC,EAAWsB,GACX1B,EAAQC,EAAMyB,GAAK3B,OAHvB,SAME,cAACgE,EAAA,EAAD,CACEP,KAAK,SACLC,KAAM,GACNf,MAAOvD,EACP6C,MAAOC,EAAO+B,aAGlB,cAAC3B,EAAA,EAAD,CAAkBC,QAAS,kBAjJ1B,SAAOZ,GAAP,eAAAZ,EAAAC,OAAA,sDACG,QAAhBkD,IAASC,GACAC,QAAQ,6CAEXtC,EADA,KACgB5B,IACNyB,GAChBxB,EAAS2B,GACTjB,EAAUiB,IAGZuC,IAAM1E,MAAM,eAAgB,gBAAiB,CAC3C,CAAEK,KAAM,UACR,CACEA,KAAM,WACNuC,QAAS,WACP,IAAMT,EAAQ,KAAQ5B,UACf4B,EAASH,GAChBxB,EAAS2B,GACTjB,EAAUiB,OAlBD,+EAiJgCwC,CAAW3C,IAA5C,SACE,cAAC4C,EAAA,EAAD,CACEd,KAAK,QACLC,KAAM,GACNf,MAAOvD,EACP6C,MAAOC,EAAO+B,gBAKrB7D,GAAWuB,GACV,cAACK,EAAA,EAAD,CAAMC,MAAOC,EAAO6B,UAApB,SACE,cAACzB,EAAA,EAAD,CAAkBC,QAAS,kBAAMR,EAASJ,IAA1C,SACE,cAACqC,EAAA,EAAD,CACEP,KAAK,sBACLC,KAAM,GACNf,MAAOvD,UA/ENuC,GAqFT,aAlPhB6C,MAAMC,UAAUC,OAAS,WACvB,OAAOC,KAAKC,KAAKC,MAAMD,KAAKE,SAAWH,KAAKI,UAwP9C,IAAM7C,EAAS8C,IAAWC,OAAO,CAC/B9C,UAAW,CACT+C,KAAM,EACNC,gBAAiB/F,EACjBgG,kBAAmB,IAErB/C,OAAQ,CACNgD,eAAgB,gBAChBC,cAAe,MACfC,UAAW,KAEbC,QAAS,CACP/C,SAAU,GACVC,WAAY,OAEdG,MAAO,CACLsC,gBAAiB,QACjBM,gBAAiB,GACjBL,kBAAmB,GACnBM,aAAc,GACdC,eAAgB,GAChBlD,SAAU,IAEZa,KAAM,CACJ6B,gBAAiB/F,EACjBwG,aAAc,GACdH,gBAAiB,GACjBL,kBAAmB,GACnBM,aAAc,GACdJ,cAAe,MACfO,WAAY,SACZR,eAAgB,iBAElB9B,SAAU,CACR+B,cAAe,MACfO,WAAY,SACZX,KAAM,GAERnB,UAAW,CACTuB,cAAe,MACfO,WAAY,SACZR,eAAgB,YAElB1B,SAAU,CACRhB,MAAO,QACPF,SAAU,GACVC,WAAY,MACZoD,iBAAkB,EAClBC,QAAS,EACTX,kBAAmB,GAErBnB,SAAU,CACR6B,iBAAkB,GAEpBjC,UAAW,CACTiC,iBAAkB,EAClBX,gBAAiB,kBACjBD,KAAM,EACNvC,MAAO,QACP+C,aAAc,GACdK,QAAS,EACTX,kBAAmB,EACnB3C,SAAU,O","file":"static/js/app.a207064e.chunk.js","sourcesContent":["export const theme = {\n    bg: \"black\",\n    grey: \"#3A3D40\",\n    toDoBg: \"#1A1C20\",\n    iconGrey: \"#6e6e6e\",\n    mint: \"red\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport { Fontisto, Feather, MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./color\";\n// import { loadStaticPaths } from \"next/dist/server/dev/static-paths-worker\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst STORAGE_KEY2 = \"@working\";\n\nArray.prototype.sample = function () {\n  return this[Math.floor(Math.random() * this.length)];\n};\n\nfunction clearAllData() {\n  AsyncStorage.getAllKeys()\n    .then((keys) => AsyncStorage.multiRemove(keys))\n    .then(() => alert(\"success\"));\n}\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [editing, setEditing] = useState(-1);\n  useEffect(() => {\n    console.log(\"working?\", working);\n  }, [working]);\n  useEffect(() => {\n    loadToDos();\n    loadStatus();\n  }, []);\n  // const emojis = {\"thumb\":\"👍\", \"heart\":\"❤️\", \"perfect\":\"💯\"};\n  const emojis = [\"👍\", \"❤️\", \"💯\"];\n\n  const travel = () => {\n    setWorking(false);\n    saveStatus(JSON.stringify({ working: false }));\n  };\n  const work = () => {\n    setWorking(true);\n    saveStatus(JSON.stringify({ working: true }));\n  };\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const saveStatus = async (work) => {\n    await AsyncStorage.setItem(STORAGE_KEY2, work);\n  };\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      setToDos(JSON.parse(s));\n      console.log(s);\n    } catch {\n      setToDos({});\n    }\n  };\n  const loadStatus = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY2);\n      const ss = JSON.parse(s);\n      setWorking(ss[\"working\"]);\n      console.log(\"📌working??\", s, ss[\"working\"]);\n    } catch {\n      setWorking(true);\n    }\n  };\n\n  const addTodo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    // save to do\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, work: working, done: false },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  // console.log(toDos);\n\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this todo?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm sure\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n\n    return;\n  };\n\n  const changeToDo = async (key, type, value) => {\n    let newToDos = { ...toDos };\n    newToDos[key][type] = value;\n    console.log(newToDos);\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n  };\n\n  const exitEdit = async (key) => {\n    await changeToDo(key, \"text\", text);\n    setText(\"\");\n    setEditing(-1);\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          {console.log(\"render working? \", working)}\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"800\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={clearAllData}>\n          <Text style={{ color: \"red\" }}>reset</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"800\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        style={styles.input}\n        onChangeText={onChangeText}\n        onSubmitEditing={addTodo}\n        returnKeyType=\"done\"\n      />\n      <ScrollView>\n        {toDos &&\n          Object.keys(toDos).map((key) =>\n            toDos[key].work === working ? (\n              <View key={key} style={styles.toDo}>\n                <View style={styles.toDoLeft}>\n                  <TouchableOpacity\n                    onPress={() => changeToDo(key, \"done\", !toDos[key].done)}\n                  >\n                    {toDos[key].done == (undefined || false) ? (\n                      <Feather name=\"circle\" size={24} color=\"white\" />\n                    ) : (\n                      <Feather\n                        name=\"check-circle\"\n                        size={24}\n                        color={theme.grey}\n                      />\n                    )}\n                  </TouchableOpacity>\n\n                  {editing != key && (\n                    <Text\n                      style={{\n                        ...styles.toDoText,\n                        color:\n                          toDos[key].done == (undefined || false)\n                            ? \"white\"\n                            : theme.grey,\n                        textDecorationLine:\n                          toDos[key].done == (undefined || false)\n                            ? \"none\"\n                            : \"line-through\",\n                      }}\n                    >\n                      {toDos[key].text}\n                    </Text>\n                  )}\n                  {editing == key && (\n                    <TextInput\n                      style={styles.editInput}\n                      onChangeText={onChangeText}\n                      onSubmitEditing={() => {\n                        exitEdit(key);\n                      }}\n                      returnKeyType=\"done\"\n                      placeholderTextColor={theme.grey}\n                    >\n                      {toDos[key].text}\n                    </TextInput>\n                  )}\n                </View>\n\n                {editing != key && (\n                  <View style={styles.toDoRight}>\n                    <TouchableOpacity\n                      onPress={() => {\n                        setEditing(key);\n                        setText(toDos[key].text);\n                      }}\n                    >\n                      <MaterialCommunityIcons\n                        name=\"pencil\"\n                        size={22}\n                        color={theme.iconGrey}\n                        style={styles.iconFont}\n                      />\n                    </TouchableOpacity>\n                    <TouchableOpacity onPress={() => deleteToDo(key)}>\n                      <Fontisto\n                        name=\"trash\"\n                        size={18}\n                        color={theme.iconGrey}\n                        style={styles.iconFont}\n                      />\n                    </TouchableOpacity>\n                  </View>\n                )}\n                {editing == key && (\n                  <View style={styles.toDoRight}>\n                    <TouchableOpacity onPress={() => exitEdit(key)}>\n                      <MaterialCommunityIcons\n                        name=\"circle-edit-outline\"\n                        size={24}\n                        color={theme.iconGrey}\n                      />\n                    </TouchableOpacity>\n                  </View>\n                )}\n              </View>\n            ) : null\n          )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"800\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoLeft: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    flex: 1,\n  },\n  toDoRight: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n    marginHorizontal: 5,\n    padding: 1,\n    paddingHorizontal: 5,\n  },\n  iconFont: {\n    marginHorizontal: 4,\n  },\n  editInput: {\n    marginHorizontal: 5,\n    backgroundColor: \"rgba(0,0,0,0.4)\",\n    flex: 1,\n    color: \"white\",\n    borderRadius: 10,\n    padding: 1,\n    paddingHorizontal: 5,\n    fontSize: 16,\n  },\n});\n"],"sourceRoot":""}